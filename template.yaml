AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-cognito-rest-api

  Sample SAM Template for sam-cognito-rest-api

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  # DynamoDB Setup
  #
  # Creates a set of tables for use by the application.
  TodosTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "TODOS"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
  
  # Cognito Setup User pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "TodoAppUserPool"
      MfaConfiguration: "OFF"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8

  # Cognito Setup User pool client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: 'TodoAppUserPoolClient'
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
  
  AppIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: "AppIdentity"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
  
  AppCognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Federated: "cognito-identiy.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref AppIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - 
          PolicyName: "AppCognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  AppIdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref AppIdentityPool
      Roles:
        authenticated: !GetAtt AppCognitoAuthorizedRole.Arn

  # Lambda Function Setup
  #
  # Lambda functions and their associated API Gateway are configured here.
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      OpenApiVersion: '2.0'
      Description: API supporting the application
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: AppAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          AppAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            AuthorizationScopes:
              - "aws.cognito.signin.user.admin"

  TodoFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: todoFunction
      CodeUri: src/modules/todos/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Architectures:
        - x86_64
      Description: CRUD service for todos.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodosTable
      Events:
        RootApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth: 
              Authorizer: AppAuthorizer
            Path: /todos
            Method: ANY
            RestApiId: !Ref ApiGatewayApi
        WildcardApi:
          Type: Api
          Properties:
            Auth: 
              Authorizer: AppAuthorizer
            Path: /todos/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGatewayApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts
        External:
        - 'aws-sdk'

  # Auth function
  AuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: AuthFunction
      CodeUri: src/modules/auth/register/
      Handler: handler.lambdaHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Architectures:
        - x86_64
      Description: Register user.
      Events:
        RootApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ApiGatewayApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - handler.ts
        External:
        - 'aws-sdk'

Outputs:
  ApiEndpoint:
    Description: "Service endpoint URL for your App configuration"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
  UserPoolId:
    Description: "The ID of the UserPool for use when running the environment setup script"
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: "The AWS ClientId that should be used in your authentication configuration"
    Value: !Ref CognitoUserPoolClient
